package main

import (
	"encoding/json"
	"fmt"
	"instasnitchbot/api"
	"instasnitchbot/assets"
	"io/ioutil"
	"log"

	"net/http"
	"os"
	"strings"
	"time"

	"github.com/ahmdrz/goinsta/v2"
	"github.com/go-co-op/gocron"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type Config struct {
	TelegramBotToken   string
	LogFileName        string
	DbName             string
	UseWebhook         bool
	UpdateStatusPeriod int
	UpdateNextAccount  int
	Port               string
}

func getConfig() Config {
	file, _ := os.Open("config.json")
	decoder := json.NewDecoder(file)
	configuration := Config{}
	err := decoder.Decode(&configuration)
	if err != nil {
		log.Panic(err)
	}
	return configuration
}

type account map[string]bool

var db = map[int64]account{}

func saveData(db map[int64]account, config Config) {
	file, err := json.MarshalIndent(db, "", " ")
	ioutil.WriteFile(config.DbName, file, 0644)
	if err != nil {
		log.Printf("SAVE DB ERROR %v", err)
	}
}

func loadData(config Config) {
	file, err := ioutil.ReadFile(config.DbName)
	if err != nil {
		log.Printf("LOAD DB ERROR %v", err)
	} else {
		db = map[int64]account{}
		json.Unmarshal([]byte(file), &db)
	}
}

func taskTryLogin() {

}

func taskUpdateStatus(bot *tgbotapi.BotAPI, insta *goinsta.Instagram, db map[int64]account, igAccounts map[string]string, config Config) {
	time.Sleep(time.Duration(config.UpdateNextAccount * 1000000000)) // –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–∞—Å–∫–∞
	log.Printf("CRON started")
	for chatId, storedAccounts := range db {
		for accountName, oldPrivateStatus := range storedAccounts {
			log.Printf("CRON updating %s", accountName)
			newPrivateStatus, err := api.GetPrivateStatus(insta, strings.ToLower(accountName))
			if err == api.UserNotFoundError { // –æ—à–∏–±–∫–∞ "account_not_found"
				continue
			} else if err != nil { // –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–æ–º–µ "account_not_found"
				log.Printf("CRON ERROR updating %s, %v", accountName, err)
				insta = api.GetNewApi(igAccounts)
				if insta == nil { // –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
					//TODO –Ω–∞–¥–æ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –µ–¥–∏–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω—É–ª–µ–≤–æ–π –∏–Ω—Å—Ç—ã - –±—Ä–∞—Ç—å –ø–∞—É–∑—É –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–∫–∞–∫-—Ç–æ —á–µ—Ä–µ–∑ –∫—Ä–æ–Ω) –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞
					//TODO –µ—Å–ª–∏ –∏–Ω—Å—Ç–∞ –Ω—É–ª–µ–≤–∞—è, —Ç–æ –ø–æ—Ç–æ–º –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ,
					//TODO —Ç—É—Ç –Ω–∞–¥–æ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å —Ç–∞—Å–∫ –∏ –±—Ä–∞—Ç—å –ø–∞—É–∑—É –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–∫–∞–∫-—Ç–æ —á–µ—Ä–µ–∑ –∫—Ä–æ–Ω) –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞
					log.Print("CRON ERROR login")
					continue
				} else { // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
					newPrivateStatus, err = api.GetPrivateStatus(insta, strings.ToLower(accountName))
					if err != nil { // —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ª–æ–≥–∏–Ω–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å –∏–º—è –∞–∫–∫–∞–Ω—Ç–∞, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
						log.Printf("CRON ERROR updating %s, %v", accountName, err)
						continue
					}
				}
			}
			if newPrivateStatus != oldPrivateStatus { // –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				msg := tgbotapi.NewMessage(chatId, "")
				db[chatId][accountName] = newPrivateStatus // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ db –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
				if newPrivateStatus {
					msg.Text = fmt.Sprintf(assets.Texts["account_is_private"], accountName)
				} else {
					msg.Text = fmt.Sprintf(assets.Texts["account_is_not_private"], accountName)
				}
				log.Printf("CRON %s status updated", accountName)
				msg.ParseMode = "HTML"
				bot.Send(msg)
			}
			saveData(db, config)
			time.Sleep(time.Duration(config.UpdateNextAccount * 1000000000)) // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ _ —Å–µ–∫—É–Ω–¥
		}
	}
}

func MainHandler(resp http.ResponseWriter, _ *http.Request) {
	resp.Write([]byte("<html><head><title>InstasnitchBot</title></head><body>Hi there! I'm InstasnitchBot!<br>I can do some shit.<br>You can get me at <a href=\"https://t.me/instasnitchbot\">https://t.me/instasnitchbot</a></body></html>"))
}

func main() {
	isPanic := false
	isTryingToLogin := false
	config := getConfig()
	port := config.Port
	if config.Port == "" {
		port = os.Getenv("PORT")
	}
	http.HandleFunc("/", MainHandler)
	go http.ListenAndServe(":"+port, nil)

	// setting up log
	f, err := os.OpenFile(config.LogFileName, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("ERROR opening log file: %v", err)
	}
	defer f.Close()
	log.SetOutput(f)

	// instagram login
	igAccounts := api.LoadLogins()
	insta := api.GetSavedApi(igAccounts)
	if insta == nil { // –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
		insta = api.GetNewApi(igAccounts)
		if insta == nil { // –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ª–∏–≥–∏–Ω–∏—Ç—å—Å—è
			//TODO –Ω–∞–¥–æ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –µ–¥–∏–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω—É–ª–µ–≤–æ–π –∏–Ω—Å—Ç—ã - –±—Ä–∞—Ç—å –ø–∞—É–∑—É –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–∫–∞–∫-—Ç–æ —á–µ—Ä–µ–∑ –∫—Ä–æ–Ω) –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞
			////isPanic = true
			log.Panicf("ERROR ERROR ERROR INSTA IS NIL")
		}
	}

	//setting up bot
	bot, err := tgbotapi.NewBotAPI(config.TelegramBotToken)
	if err != nil {
		log.Panic(err)
	}
	log.Println("--------------------------BOT STARTED--------------------------")
	bot.Debug = false

	//setting up bot telegram connection
	updates := bot.ListenForWebhook("/" + bot.Token)
	if !config.UseWebhook {
		u := tgbotapi.NewUpdate(0)
		u.Timeout = 60
		updates, _ = bot.GetUpdatesChan(u)
	}
	loadData(config)

	//setting up cron update accounts
	s := gocron.NewScheduler(time.UTC)
	_, errS := s.Every(config.UpdateStatusPeriod).Minutes().Do(taskUpdateStatus, bot, insta, db, igAccounts, config)
	if errS != nil {
		log.Printf("CRON ERROR update status %v", errS)
	}
	s.StartAsync()

	if isPanic {

	}

	for update := range updates {
		if isPanic {
			if update.Message == nil { // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π
				continue
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, assets.Texts["panic"])
			bot.Send(msg)
		} else {
			if update.CallbackQuery != nil { // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
				bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data))
				var chatId int64 = update.CallbackQuery.Message.Chat.ID
				delete(db[chatId], update.CallbackQuery.Data)
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_deleted"], update.CallbackQuery.Data))
				msg.ParseMode = "HTML"
				saveData(db, config)
				bot.Send(msg)
				if len(db[chatId]) == 0 {
					msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, assets.Texts["account_list_is_empty_now"])
					bot.Send(msg)
				}
				continue
			}

			if update.Message == nil { // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π
				continue
			}
			var chatId int64 = update.Message.Chat.ID
			if update.Message.Command() != "" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
				switch update.Message.Command() {
				case "start":
					log.Printf("COMMAND /start %s (ID %d)", update.Message.From.UserName, update.Message.From.ID)
					msg.ParseMode = "HTML"
					msg.Text = assets.Texts["instructions"]
				case "help":
					log.Printf("COMMAND /help %s (ID %d)", update.Message.From.UserName, update.Message.From.ID)
					msg.ParseMode = "HTML"
					msg.Text = assets.Texts["instructions"]
				case "SuperGetUserNumber":
					log.Printf("COMMAND /secret %s (ID %d)", update.Message.From.UserName, update.Message.From.ID)
					msg.Text = fmt.Sprintf("%d", len(db))
				case "accounts":
					log.Printf("COMMAND /accounts %s (ID %d)", update.Message.From.UserName, update.Message.From.ID)
					accountsOutput := ""
					for eachAccount, isPrivate := range db[chatId] {
						statusEmoji := "üü¢ "
						if isPrivate {
							statusEmoji = "üî¥ "
						}
						accountsOutput = accountsOutput + statusEmoji + " " + eachAccount + "\n\n"
					}
					if accountsOutput == "" {
						msg.Text = assets.Texts["account_list_is_empty"]
					} else {
						msg.Text = accountsOutput
					}
				case "del":
					log.Printf("COMMAND /del %s (ID %d)", update.Message.From.UserName, update.Message.From.ID)
					deleteAccountsKeyboard := tgbotapi.InlineKeyboardMarkup{}
					for eachAccount := range db[chatId] {
						var row []tgbotapi.InlineKeyboardButton
						button := tgbotapi.NewInlineKeyboardButtonData(eachAccount, eachAccount)
						row = append(row, button)
						deleteAccountsKeyboard.InlineKeyboard = append(deleteAccountsKeyboard.InlineKeyboard, row)
					}

					msg.Text = assets.Texts["account_choose_to_delete"]
					msg.ReplyMarkup = deleteAccountsKeyboard
				default:
					log.Printf("COMMAND UNKNOWN %s (ID %d)", update.Message.From.UserName, update.Message.From.ID)
					msg.Text = assets.Texts["unknown_command"]
				}
				bot.Send(msg)
			} else {
				// —Ç—É—Ç –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç

				newAccountName := strings.ToLower(update.Message.Text)

				log.Printf("ADD try %s BY %s (ID %d)", newAccountName, update.Message.From.UserName, update.Message.From.ID)
				if _, ok := db[chatId]; !ok {
					db[chatId] = make(account)
				}

				if len(db[chatId]) > 2 {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, assets.Texts["limit_of_accounts"])
					bot.Send(msg)
					continue
				}

				if strings.Contains(newAccountName, " ") {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_add_error"], assets.Texts["account_not_found"]))
					bot.Send(msg)
					continue
				}

				if update.Message.From.IsBot {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, assets.Texts["do_not_work_with_bots"])
					bot.Send(msg)
					continue
				}

				//TODO –Ω–∞–¥–æ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –µ–¥–∏–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω—É–ª–µ–≤–æ–π –∏–Ω—Å—Ç—ã - –±—Ä–∞—Ç—å –ø–∞—É–∑—É –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–∫–∞–∫-—Ç–æ —á–µ—Ä–µ–∑ –∫—Ä–æ–Ω) –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞
				//TODO —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –ø–æ—Ç–æ–º—É, —á—Ç–æ insta —Å –Ω—É–ª–µ–º —Å—é–¥–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å (–∏–ª–∏ —Å–º–æ–∂–µ—Ç?)
				//TODO —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Å–º–æ–∂–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–ª—å, —Ç–æ –ø–∞–Ω–∏–∫–∞ –∏ –±–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è
				// if insta == nil {
				// 	log.Printf("ADD error %s", newAccountName)
				// 	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_add_error"], assets.Texts["endpoint_error"]))
				// 	bot.Send(msg)
				////isPanic = true
				// 	continue
				// }

				privateStatus, err := api.GetPrivateStatus(insta, newAccountName)
				if err == api.UserNotFoundError { // –æ—à–∏–±–∫–∞ "account_not_found"
					log.Printf("ADD error %s, %v", newAccountName, err)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_add_error"], assets.Texts["account_not_found"]))
					bot.Send(msg)
					continue
				} else if err != nil { // –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–æ–º–µ "account_not_found"
					log.Printf("ADD ERROR %s, %v", newAccountName, err)
					insta = api.GetNewApi(igAccounts)
					if insta == nil { // –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
						//TODO –µ—Å–ª–∏ –∏–Ω—Å—Ç–∞ –Ω—É–ª–µ–≤–∞—è, —Ç–æ –ø–æ—Ç–æ–º –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ,
						//TODO —Ç—É—Ç –Ω–∞–¥–æ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å —Ç–∞—Å–∫ –∏ –±—Ä–∞—Ç—å –ø–∞—É–∑—É –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–∫–∞–∫-—Ç–æ —á–µ—Ä–µ–∑ –∫—Ä–æ–Ω) –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞
						////isPanic = true
						log.Print("ADD ERROR login")
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_add_error"], err.Error()))
						bot.Send(msg)
						continue
					} else { // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
						privateStatus, err = api.GetPrivateStatus(insta, newAccountName)
						if err == api.UserNotFoundError { // –æ—à–∏–±–∫–∞ "account_not_found"
							log.Printf("ADD error %s, %v", newAccountName, err)
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_add_error"], assets.Texts["account_not_found"]))
							bot.Send(msg)
						} else if err != nil {
							log.Print("ADD ERROR login")
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_add_error"], err.Error()))
							bot.Send(msg)
							continue
						}
					}
				}

				db[chatId][newAccountName] = privateStatus
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(assets.Texts["account_added"], newAccountName))
				log.Printf("ADD success %s BY %s (ID %d)", newAccountName, update.Message.From.UserName, update.Message.From.ID)
				msg.ParseMode = "HTML"
				saveData(db, config)
				bot.Send(msg)
			}

		}

	}
}
